name: Python package build and publish

on:
  release:
    types: [created]
  push:
    branches: [master, publish-workflow]

jobs:
  sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Build sdist
        run: |
          python setup.py sdist

      - name: Test sdist
        run: |
          pip install numpy
          pip install dist/*.gz
          python -m unittest discover -vs tests/unit
          python -m unittest discover -vs tests/integration

      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ./dist/*gz

      - name: Publish sdist to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install -U twine
          # twine upload dist/*.gz

  manylinux:
    name: Build wheels on manylinux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Build manylinux Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.6.0-manylinux2014_x86_64
        with:
          python-versions: "cp38-cp38 cp39-cp39 cp310-cp310 cp311-cp311"
          build-requirements: "cython numpy"

      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ./dist/*-manylinux*.whl

      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install -U twine
          # twine upload dist/*-manylinux*.whl

  macos10:
    name: Build wheels on macos-10.15
    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: ["cp39-*", "cp310-*", "cp311-*"]
    env:
      CIBW_ARCHS_MACOS: "x86_64"
      MACOSX_DEPLOYMENT_TARGET: "10.13"
      CC: /usr/local/bin/gcc-10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          brew install swig gcc@10

      - name: Build wheels for CPython ${{ matrix.python-version }}
        uses: pypa/cibuildwheel@v2.11.4
        env:
          CIBW_BUILD: ${{ matrix.python-version }}
          CIBW_BEFORE_BUILD: >
            pip3 install certifi &&
            git clean -fxd build
          CIBW_TEST_COMMAND: >
            python --version &&
            python -c "import pyKVFinder; print(pyKVFinder.__version__)" &&
            python -m unittest discover -vs {project}/tests/unit &&
            python -m unittest discover -vs {project}/tests/integration

      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ./wheelhouse/*.whl

      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install -U twine
          # twine upload ./wheelhouse/*.whl

  # macos11-x86_64:
  #   name: Build wheels on macOS11 x86_64
  #   runs-on: macos-11
  #   strategy:
  #     matrix:
  #       python-version: ["cp39-*", "cp310-*", "cp311-*"]
  #   env:
  #     CIBW_ARCHS_MACOS: "x86_64"
  #     CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
  #     CC: /usr/local/bin/gcc-11
  #     MACOSX_DEPLOYMENT_TARGET: 11.0
  #     _PYTHON_HOST_PLATFORM: macosx-11.0-x86_64
  #     ARCHFLAGS: "-arch x86_64"
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Build wheels for CPython ${{ matrix.python-version }}
  #       uses: pypa/cibuildwheel@v2.11.4
  #       env:
  #         CIBW_BUILD: ${{ matrix.python-version }}
  #         CIBW_BEFORE_BUILD: >-
  #           pip3 install certifi &&
  #           git clean -fxd build

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: ./wheelhouse/*.whl

  #     - name: Publish wheels to PyPI
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         pip install -U twine
  #         # twine upload ./wheelhouse/*.whl

  # macos11-arm64:
  #   name: Build wheels on macOS11 arm64
  #   runs-on: macos-11
  #   strategy:
  #     matrix:
  #       python-version: ["cp39-*", "cp310-*", "cp311-*"]
  #   env:
  #     CIBW_ARCHS_MACOS: "arm64"
  #     CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
  #     CC: /usr/local/bin/gcc-11
  #     MACOSX_DEPLOYMENT_TARGET: 11.0
  #     _PYTHON_HOST_PLATFORM: macosx-11.0-arm64
  #     ARCHFLAGS: "-arch arm64"
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Build wheels for CPython ${{ matrix.python-version }}
  #       uses: pypa/cibuildwheel@v2.11.4
  #       env:
  #         CIBW_BUILD: ${{ matrix.python-version }}
  #         CIBW_BEFORE_BUILD: >-
  #           pip3 install certifi &&
  #           git clean -fxd build

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: ./wheelhouse/*.whl

  #     - name: Publish wheels to PyPI
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         pip install -U twine
  #         # twine upload ./wheelhouse/*.whl

  # macos12-x86_64:
  #   name: Build wheels on macOS12 x86_64
  #   runs-on: macos-12
  #   strategy:
  #     matrix:
  #       python-version: ["cp39-*", "cp310-*", "cp311-*"]
  #   env:
  #     CIBW_ARCHS_MACOS: "x86_64"
  #     CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
  #     CC: /usr/local/bin/gcc-11
  #     MACOSX_DEPLOYMENT_TARGET: 12.0
  #     _PYTHON_HOST_PLATFORM: macosx-12.0-x86_64
  #     ARCHFLAGS: "-arch x86_64"
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Build wheels for CPython ${{ matrix.python-version }}
  #       uses: pypa/cibuildwheel@v2.11.4
  #       env:
  #         CIBW_BUILD: ${{ matrix.python-version }}
  #         CIBW_BEFORE_BUILD: >-
  #           pip3 install certifi &&
  #           git clean -fxd build

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: ./wheelhouse/*.whl

  #     - name: Publish wheels to PyPI
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         pip install -U twine
  #         # twine upload ./wheelhouse/*.whl

  # macos12-arm64:
  #   name: Build wheels on macOS12 arm64
  #   runs-on: macos-12
  #   strategy:
  #     matrix:
  #       python-version: ["cp39-*", "cp310-*", "cp311-*"]
  #   env:
  #     CIBW_ARCHS_MACOS: "arm64"
  #     CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
  #     CC: /usr/local/bin/gcc-11
  #     MACOSX_DEPLOYMENT_TARGET: 12.0
  #     _PYTHON_HOST_PLATFORM: macosx-12.0-arm64
  #     ARCHFLAGS: "-arch arm64"
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Build wheels for CPython ${{ matrix.python-version }}
  #       uses: pypa/cibuildwheel@v2.11.4
  #       env:
  #         CIBW_BUILD: ${{ matrix.python-version }}
  #         CIBW_BEFORE_BUILD: >-
  #           pip3 install certifi &&
  #           git clean -fxd build

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: artifacts
  #         path: ./wheelhouse/*.whl

  #     - name: Publish wheels to PyPI
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         pip install -U twine
  #         # twine upload ./wheelhouse/*.whl
